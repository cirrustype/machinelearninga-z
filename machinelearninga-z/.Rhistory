R <- qr.R(QR) #R is an upper triangular matrix. Check this.
R
Q %*% R #Q %*% R == X
#Calculate the parameters using QR decompostion
Rinv = solve(R)
vbeta = Rinv %*% t(Rinv)
betahat = Rinv %*% t(Q) %*% y
betahat
(t(Q) %*% Q)
?table
table(x)
x <- c(a,a,d,b,c,b,d,a,a,a,a,b,b,b,c,c,d,d,b,d,c,a,d,d,)
x <- c(a,a,d,b,c,b,d,a,a,a,a,b,b,b,c,c,d,d,b,d,c,a,d,d,)
x <- c(a,a,d,b,c,b,d,a,a,a,a,b,b,b,c,c,d,d,b,d,c,a,d,d)
x <- list(a,a,d,b,c,b,d,a,a,a,a,b,b,b,c,c,d,d,b,d,c,a,d,d)
x <- list("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
x
x <- c("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
length(x)
y <- as.factor(c(1,1,1,2,2,3,3,3,3,1,2,2,1,3,3,1))
length(y)
y <- as.factor(c(1,1,1,2,2,3,3,3,3,1,2,2,1,3,3,1,2,2,2,3,1))
length(y)
y <- as.factor(c(1,1,1,2,2,3,3,3,3,1,2,2,1,3,3,1,2,2,2,3,1,3,1,2))
length(y)
length(x)
?kruskal.test
kruskal.test(y,x)
x <- list("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
y <- as.factor(c(1,1,1,2,2,3,3,3,3,1,2,2,1,3,3,1,2,2,2,3,1,3,1,2))
?kruskal.test
kruskal.test(y,x)
df <- cbind(x,y)
df
levels(df$x)
source('~/.active-rstudio-document', echo=TRUE)
x <- c("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
levels(x)
x <- as.factor(x)
kruskal.test(y,x)
install.packages("FSA")
library(FSA)
kruskal.test(y,x)
?dunnTest
dunnTest(y~x)
y <- as.vector(c(1,1,1,2,2,3,3,3,3,1,2,2,1,3,3,1,2,2,2,3,1,3,1,2))
dunnTest(y~x)
kruskal.test(y,x)
#####example#####
x <- c("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
y <- as.vector(c(4,1,4,2,2,3,3,3,3,1,2,5,1,3,3,1,2,2,2,4,1,3,5,2))
x <- as.factor(x)
kruskal.test(y,x)
dunnTest(y~x)
nature <- c("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
racoon <- as.vector(c(4,1,4,2,2,3,3,3,3,1,2,5,1,3,3,1,2,2,2,4,1,3,5,2))
nature<- as.factor(nature)
kruskal.test(racoon,nature)
dunnTest(racoon~nature)
nature <- c("a","a","d","b","c","b","d","a","a","a","a","b","b","b","c","c","d","d","b","d","c","a","d","d")
racoon <- as.vector(c(4,1,4,2,2,3,3,3,3,1,2,5,1,3,3,1,2,2,2,4,1,3,5,2))
nature<- as.factor(nature)
kruskal.test(racoon,nature)
dunnTest(racoon~nature)
# mandelbrot_vectorized.R
# Myles Harrison
# http://www.everydayanalytics.ca
# parameters
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(20)
xmin = -.80
xmax = -.7
nx = 500
ymin = -.25
ymax = -.2
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
# parameters
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(11)
image(x,y,k, col=cols, las=1)
# parameters
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(110)
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(110)
xmin = -2
xmax = 2
nx = 500
ymin = -1
ymax = 1
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(110)
xmin = -2
xmax = 1
nx = 500
ymin = -.5
ymax = .5
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(1100)
xmin = -2
xmax = -.5
nx = 500
ymin = -.5
ymax = .5
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(1100)
xmin = -1.4
xmax = -1
nx = 500
ymin = 1.8
ymax = .5
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(1100)
xmin = -1.4
xmax = -1
nx = 500
ymin = .5
ymax = .8
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(1100)
xmin = -1.4
xmax = -1
nx = 500
ymin = .5
ymax = 1
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
cols <- colorRampPalette(c("white","steelblue","steelblue3","white"))(1100)
xmin = -1.4
xmax = -1
nx = 500
ymin = 0
ymax = 1
ny = 500
n=75
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols, las=1)
x <- c(1,2,3,4)
sum(x)
multiples <- vector(1000)
for (i in 1:999) {
if(i%%3 = 0 or i%%5 = 0){multiples[i] = i}
else{multiples[i] = 0}
}
for (i in 1:999) {
if(i%%3 == 0 or i%%5 == 0){multiples[i] = i}
else{multiples[i] = 0}
}
for (i in 1:999) {
if(i%%3 == 0) multiples[i] = i else
if(i%%5 == 0) multiples[i] = i else
multiples[i] = 0
}
source('~/.active-rstudio-document', echo=TRUE)
multiples <- vector()
for (i in 1:999) {
if(i%%3 == 0) multiples[i] = i else
if(i%%5 == 0) multiples[i] = i else
multiples[i] = 0
}
multiples
(sum(multiples))
multisum <- function(a,b,n){
multiples <- vector()
for (i in 1:n-1) {
if(i%%a == 0) multiples[i] = i else
if(i%%a == 0) multiples[i] = i else
multiples[i] = 0 #set all non multiples to 0
}
multisum <- sum(multiples)
return(multisum)
}
multisum(3,5,1000)
multisum <- function(a,b,n){
multiples <- vector()
for (i in 1:n-1) {
if(i%%a == 0) multiples[i] = i else
if(i%%b == 0) multiples[i] = i else
multiples[i] = 0 #set all non multiples to 0
}
multisum <- sum(multiples)
return(multisum)
}
multisum(3,5,1000)
N <- vector()
n=3
while ( n <= 4000000){
N[n] <- N[n-1] + N[n-2]
}
N
?c
leo = function(n){
fib <- numeric(n)
fib[1] <- 1
fib[1] <- 1
for (i in 3:n){
fib[i] <- fib[i-1] + fib[i-2]
}
return(sum(fib[fib %% 2 ==0]))
}
leo(4000000)
warnings()
leo = function(a,b){
f <- a + b
while (f<= 90){
c(f, leo(b,f))
}
}
leo(0,1)
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
while (fibs[i] <= 10){
fibs[i] <- fibs[i-1] + fibs[i-2]
}
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
i=3
while (fibs[i] <= 10){
fibs[i] <- fibs[i-1] + fibs[i-2]
}
fib <- c(1,1)
i<-2
while(fib[i] <= 4000000){
fib <- c(fib, (fib[i-1] + fib[i-2))
i = i + 1
}
fib <- c(1,1)
i <- 2
while (fib[i] <= 4000000){
fib <- c(fib, (fib[i-1] + fib[i-2]))
i = i + 1
}
fib <- c(1,1)
i <- 2
while (fib[i] <= 4000000){
fib <- c(fib, (fib[i-1] + fib[i]))
i = i + 1
}
fib
sum(fib[fib %% 2 == 0 & fib <= 4000000])
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
for (i in 3:20){
fibs[i] = fibs[i-1] + fibs[i-2]
}
fibs
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
for (i in 3:30){
fibs[i] = fibs[i-1] + fibs[i-2]
}
fibs
for (i in 3:35){
fibs[i] = fibs[i-1] + fibs[i-2]
}
fibs
leo = function(n){
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
for (i in 3:n){
fibs[i] = fibs[i-1] + fibs[i-2]
}
return(fibs)
}
leo(10)
leo(100)
leo(50)
leo(25)
leo(40)
leo(35)
leo(33)
leo = function(n){
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
for (i in 3:n){
fibs[i] = fibs[i-1] + fibs[i-2]
}
return(fibs)
return sum(fibs[fibs %% 2 == 0])
}
leo = function(n){
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
for (i in 3:n){
fibs[i] = fibs[i-1] + fibs[i-2]
}
return(fibs)
return (sum(fibs[fibs %% 2 == 0]))
}
leo(10)
leo = function(n){
fibs <- vector()
fibs[1] = 1
fibs[2] = 1
for (i in 3:n){
fibs[i] = fibs[i-1] + fibs[i-2]
}
sumfibs <- (sum(fibs[fibs %% 2 == 0]))
list(fibs, sumfibs)
}
leo(10)
leo(100) #massive
leo(50)
leo(25)
leo(40)
leo(35)
leo(33) #bingo
install.packages("ggplot2")
library(ggplot2)
t <- seq(0, 2*pi, length.out = 50)
t
x <- cos(t)
y <- sin(t)
circle <- data.frame(t, x, y)
p <- ggplot(circle, aes(x,y))
p
options(repr.plot.width = 4, repr.plot.height = 4)
p <- ggplot(circle, aes(x,y))
p
t <- seq(0, 2*pi, length.out = 50)
t
x <- cos(t)
y <- sin(t)
circle <- data.frame(t, x, y)
p <- ggplot(circle, aes(x,y))
p
x <- sin(t)
y <- cos(t)
circle <- data.frame(t, x, y)
p <- ggplot(circle, aes(x,y))
p
p + geom_point(x,y)
p + geom_point()
points = 500
angle = pi*(3 - sqrt(5))
t <- (1:points) * angle
x <- sin(t)
y <- cos(t)
spiral <- data.frame(t,x,y)
p <- ggplot(spiral, aes(x,y))
p + geom_point()
p <- ggplot(spiral, aes(x*t,y*t))
p + geom_point()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
remove.packages("quadprog", lib="~/R/win-library/3.5")
install.packages("quadprog")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
#section 2, part 1: Data Preprocessing
#importing the dataset
dataset = read.csv('Data.csv')
dataset
#imputing missing data
dataset$Age =ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x)
mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary =ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x)
mean(x, na.rm = TRUE)),
dataset$Salary)
dataset = read.csv('Data.csv')
dataset
setwd("C:/Users/Hal/Desktop/programming/data_science/machinelearninga-z/machinelearninga-z/machinelearninga-z")
#section 2, part 1: Data Preprocessing
#importing the dataset
dataset = read.csv('Data.csv')
dataset
#imputing missing data
dataset$Age =ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x)
mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary =ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x)
mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
View(dataset)
View(dataset)
